#version 430 core

layout (std430, binding = 2) restrict readonly buffer BoidCounts {
  uint boidCounts[];
};

layout (std430, binding = 4) restrict buffer BoidRanges {
  uint boidRanges[];
};

layout (std140, binding = 0) uniform SimParams {
  mat4 projection;
  vec2 winScale;
  uvec2 cellCounts;
  uint numBoids, cellCount;
  float cellSize, mapRatio,
    edgeDist, edgeFactor,
    separateDist2, separateFactor,
    alignDist2, alignFactor,
    attractDist2, attractFactor,
    maxSpeed;
};

layout (local_size_x = 64, local_size_y = 3, local_size_z = 3) in;

void main() {
  uint cellNum = gl_GlobalInvocationID.x;

  if (cellNum >= cellCount) return;

  uint srcCellNum = uint(cellNum + (int(gl_LocalInvocationID.y) - 1) + (int(gl_LocalInvocationID.z) - 1) * cellCounts.x + cellCount) % cellCount;

  atomicAdd(boidRanges[cellNum * 2 + 1], boidCounts[srcCellNum]);
}
